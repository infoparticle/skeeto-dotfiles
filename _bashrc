## -*- default-directory: "~/.dotfiles/"; -*-

## Options
shopt -s globstar 2>/dev/null || true  # quietly set if available
shopt -s checkwinsize
set +o histexpand

## Key bindings
bind '\C-w:backward-kill-word' 2>/dev/null
stty -ixon >/dev/null 2>&1 || true # disable flow control (XON/XOFF)

## Completions
_systemctl() {
    _completion_loader systemctl
    _systemctl "${@}"
}
complete -F _systemctl d
complete -d cd

## Environment
unset PS1
_PS1() {
    local PRE= NAME="$1" LENGTH="$2";
    [[ "$NAME" != "${NAME#$HOME/}" || -z "${NAME#$HOME}" ]] &&
        PRE=$PRE'~' NAME="${NAME#$HOME}" LENGTH=$[LENGTH-1];
    ((${#NAME}>$LENGTH)) && NAME="/...${NAME:$[${#NAME}-LENGTH+4]}";
    echo "$PRE$NAME"
}
PS1='\[\e[1;32m\]\h\[\e[m\]\
\[\e[1;35m\]$(_PS1 "$PWD" 30)\[\e[m\] '
export EDITOR="vim"
export BROWSER="firefox"
if [ "$TERM" = "dumb" ]; then
    PS1="> "
fi
export WINEDEBUG=-all

if [ -e ~/.dpi ]; then
    source ~/.dpi
fi

## Identity
export REALNAME="Christopher Wellons"
export NAME="$REALNAME"
export EMAIL="wellons@nullprogram.com"

## PATH variables
add() {
    # Prepend $1 to $2 if not in $2
    if [[ ":$2:" != *":$1:"* ]]; then
        if [ -z "$2" ]; then
            printf '%s' "$1"
        else
            printf '%s' "$1:$2"
        fi
    else
        printf '%s' "$2"
    fi
}
restore() {
    # Restore pre-configuration paths
    if [ "$ORIG_SAVED" = yes ]; then
        PATH="$ORIG_PATH"
        C_INCLUDE_PATH="$ORIG_C_INCLUDE_PATH"
        CPLUS_INCLUDE_PATH="$ORIG_CPLUS_INCLUDE_PATH"
        LIBRARY_PATH="$ORIG_LIBRARY_PATH"
        LD_LIBRARY_PATH="$ORIG_LD_LIBRARY_PATH"
        LD_RUN_PATH="$ORIG_LD_RUN_PATH"
        PKG_CONFIG_PATH="$ORIG_PKG_CONFIG_PATH"
    fi
    hash -r
}
if [ "$ORIG_SAVED" != yes ]; then
    # Save pre-configuration paths
    export ORIG_SAVED=yes
    export ORIG_PATH="$PATH"
    export ORIG_C_INCLUDE_PATH="$C_INCLUDE_PATH"
    export ORIG_CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH"
    export ORIG_LIBRARY_PATH="$LIBRARY_PATH"
    export ORIG_LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
    export ORIG_LD_RUN_PATH="$LD_LD_RUN_PATH"
    export ORIG_PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
fi
PATH=$(add /usr/sbin "$PATH")
PATH=$(add /sbin "$PATH")
PATH=$(add ~/.local/games "$PATH")
PATH=$(add ~/.local/bin "$PATH")
C_INCLUDE_PATH=$(add ~/.local/include "$C_INCLUDE_PATH")
CPLUS_INCLUDE_PATH=$(add ~/.local/include "$CPLUS_INCLUDE_PATH")
LIBRARY_PATH=$(add ~/.local/lib "$LIBRARY_PATH")
LD_LIBRARY_PATH=$(add ~/.local/lib "$LD_LIBRARY_PATH")
LD_RUN_PATH=$(add ~/.local/lib "$LD_RUN_PATH")
if [[ "$(uname -m)" == *64* ]]; then
    LIBRARY_PATH=$(add ~/.local/lib64 "$LIBRARY_PATH")
    LD_LIBRARY_PATH=$(add ~/.local/lib64 "$LD_LIBRARY_PATH")
    LD_RUN_PATH=$(add ~/.local/lib64 "$LD_RUN_PATH")
else
    LIBRARY_PATH=$(add ~/.local/lib32 "$LIBRARY_PATH")
    LD_LIBRARY_PATH=$(add ~/.local/lib32 "$LD_LIBRARY_PATH")
    LD_RUN_PATH=$(add ~/.local/lib32 "$LD_RUN_PATH")
fi
PKG_CONFIG_PATH=$(add ~/.local/lib/pkgconfig "$PKG_CONFIG_PATH")
export C_INCLUDE_PATH
export CPLUS_INCLUDE_PATH
export LIBRARY_PATH
export LD_LIBRARY_PATH
export LD_RUN_PATH
export PKG_CONFIG_PATH

## libvirt
export LIBVIRT_DEFAULT_URI=qemu:///system

## Go
_golatest() {
    local r
    for dir in "$@"; do
        if [ -d "$dir" ]; then
            r="$(find "$dir" -maxdepth 1 -name 'go-*' | sort -rV | head -n1)"
            if [ -n "$r" ]; then
                printf '%s' "$r"
                break
            fi
        fi
    done
}
PATH=$(add "${GOPATH:-$HOME/go}/bin" "$PATH")
if ! command -v go > /dev/null 2>&1; then
    golatest="$(_golatest "${GOPATH:-$HOME/go}" /usr/lib)"
    if [ -n "$golatest" ]; then
        PATH=$(add "$golatest/bin" "$PATH")
    fi
fi

## Agents
if $(command -v keychain > /dev/null 2>&1); then
    eval $(keychain --eval --quiet)
fi

## Custom Colors
colorscheme() {
    if [[ "$-" == *"i"* ]] && [[ "$TERM" != "dumb" ]]; then
        echo -ne '\e]4;0;#2E3436\a'   # black
        echo -ne '\e]4;1;#CC0000\a'   # red
        echo -ne '\e]4;2;#4E9A06\a'   # green
        echo -ne '\e]4;3;#C4A000\a'   # yellow
        echo -ne '\e]4;4;#3465A4\a'   # blue
        echo -ne '\e]4;5;#75507B\a'   # magenta
        echo -ne '\e]4;6;#06989A\a'   # cyan
        echo -ne '\e]4;7;#BABDB6\a'   # white
        echo -ne '\e]4;8;#555753\a'   # bright black
        echo -ne '\e]4;9;#EF2929\a'   # bright red
        echo -ne '\e]4;10;#8AE234\a'  # bright green
        echo -ne '\e]4;11;#FCE94F\a'  # bright yellow
        echo -ne '\e]4;12;#729FCF\a'  # bright blue
        echo -ne '\e]4;13;#D15CD1\a'  # bright magenta
        echo -ne '\e]4;14;#34E2E2\a'  # bright cyan
        echo -ne '\e]4;15;#EEEEEC\a'  # bright white
        echo -ne '\e]10;#FFFFFF\a'    # default foreground
        echo -ne '\e]11;#1D1F21\a'    # default background
    fi
}
colorscheme

## Functions

title() {
    printf "\e]2;%s\a" $1
}

nproc() {
    if $(which nproc >/dev/null 2>&1); then
        command nproc
    elif [ -e /proc/cpuinfo ]; then
        grep ^processor < /proc/cpuinfo | wc -l
    else
        sysctl -n hw.ncpu
    fi
}

hh() {
    if command -v hastyhex >/dev/null 2>&1; then
        hastyhex "$@" | less -FRX
    else
        hexdump -C "$@" | less -FRX
    fi
}

httpsd() {
    remote_port=${1:-9443}
    local_port=${2:-9080}
    keyfile="${TMPDIR:-/tmp}/K_$(tr -cd 'a-f0-9' < /dev/urandom | head -c32)"
    # Generate a fresh, unencrypted, self-signed key. Since stunnel3
    # cannot read a key from a pipe, write it to a temporary file.
    # Also, create a daemon suicide pact via subshell trap.
    (trap 'rm -f "$keyfile"; kill $(jobs -p) 2> /dev/null' SIGINT SIGTERM EXIT
     set -euo pipefail
     umask 0177
     openssl req -x509 -nodes \
             -subj "/CN=$(hostname)" \
             -newkey rsa:2048 \
             -keyout /dev/stdout \
             -out /dev/stdout \
             -days 365 > "$keyfile"
     python3 -m http.server "$local_port" --bind 127.0.0.1 &
     stunnel3 -f -P '' -r "$local_port" -d "$remote_port" -p "$keyfile")
}

## Aliases

source ~/.bash_aliases
if [ -e /etc/bash_completion ]; then
    source /etc/bash_completion
fi

## Local configuration (loaded last for overrides)

if [ -f ~/.bash_local ]; then
   . ~/.bash_local
fi
